{"version":3,"sources":["Components/Catalogue.js","firebase.js","Components/NewMovies.js","Components/Suggested.js","Components/MovieDetails.js","Components/LinkButton.js","Components/SearchBar.js","Components/WatchList.js","Components/Footer.js","App.js","reportWebVitals.js","index.js"],"names":["Catalogue","theApiCall","searchQuery","pageNumber","endPointWord","axios","url","params","api_key","language","page","Math","floor","random","query","then","movies","setState","data","results","catch","alert","state","this","props","match","searchQueryHere","prevProps","className","map","movie","poster_path","to","id","src","alt","original_title","Component","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","NewMovies","foreignMoviesProp","title","library","add","faHeart","Suggested","axiosCall","val","with_genres","genre","res","reducedData","slice","foreignMovie","saveSelection","dbRef","database","ref","length","once","firebaseDataObj","firebaseData","prop","push","handleInputChange","e","userSelection","target","value","handleSubmit","preventDefault","htmlFor","name","onChange","disabled","onClick","icon","MovieDetails","Axios","movieDetails","sort_by","include_adult","include_video","genres","tagline","overview","withRouter","history","location","staticContext","buttonError","rest","event","SearchBar","handleChange","inputError","handleAdd","type","placeholder","WatchList","removeFromFirebase","remove","toggleWatchList","sidebarOpen","savedRecommendations","on","firebaseArray","Object","values","sidebarClassname","togglerClassname","removeButtonClassname","tabIndex","onKeyDown","faAngleDoubleRight","aria-label","firebaseMovie","index","primaryMovie","arrayOfMovies","faTrash","Footer","App","search","handleSearchCall","exact","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4063a511.chunk.js","sourcesContent":["//this component comprises the main directory of the application\n\nimport axios from 'axios';\nimport { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\nclass Catalogue extends Component {\n    constructor() {\n        super();\n        this.state = {\n            movies: []\n        }\n    }\n\n    //component did mount acts as a mediator between kinds of directories\n    componentDidMount() {\n        //if the user has searched for movies in the application's search bar, the query is capturable by way of the router. this becomes accessible as a prop. \n        //whether the prop is truthy, the api call is passed with or without it\n        //the if statement is the component showing results\n        if (this.props.match.params.searchQueryHere) {\n            this.theApiCall(this.props.match.params.searchQueryHere);\n            //the else statement is the mainpage directory, before a query is passed\n        } else {\n            this.theApiCall();\n        }\n    }\n\n    //component did update handles the error of recalling the api if a new search is attempted with the same query\n    componentDidUpdate(prevProps) {\n        if (prevProps.match.params.searchQueryHere !== this.props.match.params.searchQueryHere) {\n            this.theApiCall(this.props.match.params.searchQueryHere);\n        }\n    }\n\n    theApiCall = (searchQuery) => {\n        let randomPage = (pageNumber) => { return (Math.floor(Math.random() * Math.floor(pageNumber))) };\n        //our main directory API call populates the movie directory with or without query input from the user. the variable below establishes which endpoint is reached depending on whether a query has been established by the user or not. 'discover' auto-populates movies based on genre, while 'search' populates movies based on the query provided.\n        let endPointWord = 'discover';\n        //if the value of searchQuery is truthy, the endPointWord variable changes, thus changing the capabilities of the api depending on the needs of the user\n        if (searchQuery) {\n            endPointWord = 'search';\n        }\n        axios({\n            url: `https://api.themoviedb.org/3/${endPointWord}/movie`,\n            params: {\n                api_key: '47f7f0a78ce3e2f1427da95247b6bc0e',\n                language: 'en-US',\n                page: randomPage(100) + 1,\n                query: searchQuery\n            }\n            //results of the api call are stored and used for display purposes in the state of Catalogue's component\n        }).then((movies) => {\n            this.setState({\n                movies: movies.data.results\n            })\n        }).catch(() => {\n            alert('api error')\n        })\n    }\n\n    render() {\n        //in render, we map through the information just stored in state to display the results of the call.\n        return (\n            <div className=\"catalogue flex\">\n                {\n                    this.state.movies.map((movie) => {\n                        //this condition prevents movies in the database without a corresponding poster to be excluded from results\n                        if (movie.poster_path !== null) {\n                            return (\n                                <div className=\"movie\" key={movie.id}>\n                                    <Link to={`/movie/${movie.id}`}>\n                                        <img src={`http://image.tmdb.org/t/p/w500/${movie.poster_path}`} alt={`Poster for ${movie.original_title}`} />\n                                    </Link>\n                                </div>\n                            )\n                        } else {\n                            return null\n                        }\n                    })\n                }\n            </div>\n        )\n    }\n}\n\nexport default Catalogue;","import firebase from \"firebase/app\";\nimport \"firebase/database\";\nconst firebaseConfig = {\n    apiKey: \"AIzaSyCxncbNWc05xc1-OE0GeqFj93BIlPHCU88\",\n    authDomain: \"project6-60da1.firebaseapp.com\",\n    projectId: \"project6-60da1\",\n    storageBucket: \"project6-60da1.appspot.com\",\n    messagingSenderId: \"864738316885\",\n    appId: \"1:864738316885:web:87f7139af069f0c8fd3adc\"\n};\nfirebase.initializeApp(firebaseConfig);\nexport default firebase;","import { Component } from 'react';\n\n\nclass NewMovies extends Component {\n\n    render() {\n        return (\n\n            <div className=\"movieResults\">\n                <h3 className=\"suggestedHeader\">Suggested Movies:</h3>\n                <div className=\"flex dropDownResult\">\n                    {\n                        this.props.foreignMoviesProp.map((movie) => {\n                            if (movie.poster_path !== null) {\n                                return (\n                                    <div key={movie.id}\n                                        className=\"movieDropDown\">\n                                        <img src={`http://image.tmdb.org/t/p/w500/${movie.poster_path}`} alt={movie.title} />\n                                    </div>\n                                )\n                            } else {\n                                return null\n                            }\n                        })\n                    }\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default NewMovies;","//this component does the work of providing recommendations to the user based on the original movie they selected, as well as the language they decide they'd like the recommendations to appear in. once these recommendations are retrieved and printed, the user can store the recommendations along with the original movie selected in a database.\nimport axios from 'axios';\nimport { Component } from 'react';\nimport firebase from '../firebase.js';\nimport NewMovies from './NewMovies.js';\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { faHeart } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nlibrary.add(faHeart);\n\nclass Suggested extends Component {\n    constructor() {\n        super();\n        this.state = {\n            userSelection: '',\n            foreignMovie: []\n        }\n    }\n\n    //this axios call accesses randomized recommendations based on the genre from the selected movie — through props. the 'val' parameter constitutes information captured from the selected option in a dropdown menu of different possible languages\n    axiosCall = (val) => {\n        let randomPage = (pageNumber) => { return (Math.floor(Math.random() * Math.floor(pageNumber))) };\n        //this condition specifies, if the user has not\n        if (val) {\n            axios({\n                url: `https://api.themoviedb.org/3/discover/movie`,\n                params: {\n                    api_key: '47f7f0a78ce3e2f1427da95247b6bc0e',\n                    language: val,\n                    with_genres: this.props.genre,\n                    page: randomPage(100) + 1 \n                },\n            //because the data comes back to us as a bulky 20 objects in an array, reducedData slices it down to a more manageable 6 movies\n            }).then((res) => {\n                let reducedData = res.data.results.slice(0, 6);\n                this.setState({\n                    foreignMovie: reducedData\n                })\n            }).catch(() => {\n                alert('api error')\n            })\n        //the axios call does not run unless the user selects a language\n        } else {\n            alert('Please select a language')\n        }\n    }\n\n    //the recommendations generated by the axios call can be saved by the user once they press the button that contains this function onclick\n    saveSelection = () => {\n        //the 'save' is to firebase, which we refer to in this variable\n        const dbRef = firebase.database().ref();\n        //if the user has not generated an axios call with the list of recommendations, the user cannot save an outcome. the length of the array determines this, not the signifier of an empty array\n        if (this.state.foreignMovie.length === 0) {\n            alert('Nothing has been selected yet')\n        }\n        //this listener retrieves the information store in fire base\n        else {\n            dbRef.once('value', (data) => {\n                const firebaseDataObj = data.val();\n                //establishes an empty array\n                let firebaseData = [];\n                for (let prop in firebaseDataObj) {\n                    const movie = firebaseDataObj[prop];\n                    //and pushes what's otherwise an object into the array of state\n                    firebaseData.push(movie);\n                }\n                // console.log(firebaseDataObj); - for future error handling\n                dbRef.push([this.props.movie, this.state.foreignMovie])\n            });\n        }\n    }\n\n    //retrieves the user's selection of language and stores it in state\n    handleInputChange = (e) => {\n        this.setState({\n            userSelection: e.target.value,\n        });\n    }\n\n    //makes the axios call for generating recommendations\n    handleSubmit = (e) => {\n        e.preventDefault();\n        this.axiosCall(this.state.userSelection);\n    }\n\n    render() {\n        return (\n            <div>\n                <br />\n                <form className=\"flex column dropDownForm\">\n                    <label htmlFor=\"languagesDropDown\">Interested in something similar but in a different language?</label>\n                    <div className=\"flex dropDownBox\">\n                        <select\n                            name=\"languagesDropdown\"\n                            id=\"languagesDropdown\"\n                            onChange={this.handleInputChange}\n                            value={this.state.userSelection}>\n                            <option value=\"\" disabled>Language</option>\n                            <option value=\"cn\">Chinese</option>\n                            <option value=\"de\">German</option>\n                            <option value=\"it\">Italian</option>\n                            <option value=\"jp\">Japanese</option>\n                            <option value=\"ru\">Russian</option>\n                            <option value=\"es\">Spanish</option>\n                        </select>\n                        <button\n                            className=\"dropDownButton\"\n                            onClick={this.handleSubmit}>Show me\n                        </button>\n                    </div>\n                </form>\n                <p>Save Your Selection!</p>\n                <button className=\"favourite\" onClick={this.saveSelection}>\n                    <FontAwesomeIcon icon={['fa', 'heart']} />\n                </button>\n                <NewMovies\n                    foreignMoviesProp={this.state.foreignMovie} />\n            </div>\n        )\n    }\n}\n\nexport default Suggested;","//this component displays the selected movie, its details, and — if the user so chooses a specific language — a list of 6 foreign language recommendations related to the original movie selected\n\nimport Axios from 'axios';\nimport { Component } from 'react';\nimport Suggested from './Suggested.js';\n\nclass MovieDetails extends Component {\n    constructor() {\n        super();\n        this.state = {\n            movie: {},\n            genre: '',\n        }\n    }\n\n    componentDidMount() {\n        //this axios call populates the details for the specific movie selected from catalogue, captured by props. importantly the selected movie's genre is captured once the axios call is made.\n        Axios({\n            url: `https://api.themoviedb.org/3/movie/${this.props.match.params.movieDetails}`,\n            params: {\n                api_key: '47f7f0a78ce3e2f1427da95247b6bc0e',\n                language: 'en-US',\n                sort_by: 'popularity.desc',\n                include_adult: 'false',\n                include_video: 'false',\n                page: '1'\n            },\n        //results of the api call that provide information on the movie selected are stored in the movie state. the movie's genre is extrapolated from the data, and held in its own state for later.\n        }).then((res) => {\n            this.setState({\n                movie: res.data,\n                genre: res.data.genres[0].id,\n            })\n        }).catch(() => {\n            alert('error')\n        })\n    }\n\n    render() {\n        //the data is destructured here for ease of use\n        const { original_title, tagline, overview, poster_path } = this.state.movie;\n        return (\n        //once the api call is received and state is set, the results are displayed here\n            <div className=\"posterAll flex wrapper\">\n                <div className=\"image flex column\">\n                    \n                        <img src={`http://image.tmdb.org/t/p/w500/${poster_path}`} alt={`poster for ${poster_path}`} />\n                   \n                </div>\n                <div className=\"textContent flex column\">\n                    <h2>{original_title}</h2>\n                    <h3>{tagline}</h3>\n                    <p>{overview}</p>\n                    <Suggested\n                    genre={this.state.genre}\n                    movie={this.state.movie}\n                    />\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default MovieDetails;","//https://stackoverflow.com/questions/42463263/wrapping-a-react-router-link-in-an-html-button/49439893#49439893\n//Solution by Beau Smith\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router';\n\nconst LinkButton = (props) => {\n    const {\n        history,\n        location,\n        match,\n        staticContext,\n        to,\n        onClick,\n        buttonError,\n        // ⬆ filtering out props that `button` doesn’t know what to do with.\n        ...rest\n    } = props\n\n    return (\n        <button\n            {...rest} // `children` is just another prop!\n            onClick={(event) => {\n                onClick && onClick(event)\n                history.push(to)\n            }} \n            disabled={buttonError === true}\n        />\n    )\n\n}\n\nLinkButton.propTypes = {\n    to: PropTypes.string.isRequired,\n    children: PropTypes.node.isRequired\n}\n\nexport default withRouter(LinkButton)","import React, { Component } from 'react';\nimport LinkButton from './LinkButton.js'\n\nclass SearchBar extends Component {\n    constructor() {\n        super();\n        this.state = {\n            searchQuery: '',\n            inputError: true,\n        }\n    }\n\n    handleChange = (e) => {\n        this.setState({\n            searchQuery: e.target.value,\n            inputError: false,\n        })\n    }\n\n    handleAdd = (e) => {\n        e.preventDefault();\n        if (this.state.searchQuery === '') {\n            this.setState({\n                inputError: true,\n            })\n        }\n    }\n\n    render() {\n        return (\n            <form className=\"search flex searchButtonBox\">\n                <label htmlFor=\"search\" \n                className=\"srOnly\">\n                    Search\n                </label>\n                <input\n                    onChange={this.handleChange}\n                    value={this.state.searchQuery}\n                    type=\"text\" \n                    id=\"search\"\n                    placeholder=\"search\"/>\n                <LinkButton\n                    buttonError={this.state.inputError}\n                    onClick={this.handleAdd}\n                    to={`/search/${this.state.searchQuery}`}>Search</LinkButton>\n            </form>\n        )\n    }\n}\n\nexport default SearchBar;","//this component comprises the functionality that stores and displays saved recommendations to users in a toggleable menu\n\nimport { Component } from 'react';\nimport firebase from '../firebase';\nimport { faAngleDoubleRight, faTrash } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\n\nclass WatchList extends Component {\n    constructor() {\n        super();\n        this.state = {\n            savedRecommendations: [],\n            sidebarOpen: false\n        }\n    }\n\n    //listens for updating data in firebase\n    componentDidMount() {\n        const dbRef = firebase.database().ref();\n        dbRef.on('value', (data) => {\n            const firebaseDataObj = data.val();\n            let firebaseData = [];\n            for (let prop in firebaseDataObj) {\n                const movie = firebaseDataObj[prop];\n                firebaseData.push(movie);\n            }\n            const firebaseArray = Object.values(firebaseData)\n            this.setState({\n                savedRecommendations: firebaseArray,\n            })\n        });\n    }\n\n    //removes all input in firebase\n    //for future, we'd like to resolve\n    removeFromFirebase = () => {\n        firebase.database().ref('/').remove();\n    }\n\n    //handles the state of the open side bar, becomes the opposite boolean value on click\n    toggleWatchList = () => {\n        this.setState({\n            sidebarOpen: !this.state.sidebarOpen\n        })\n    }\n\n    render() {\n        //these variables change depending on the state of the open sidebar\n        let sidebarClassname = this.state.sidebarOpen ? 'watchListOpen' : 'watchList';\n        let togglerClassname = this.state.sidebarOpen ? 'togglerOpen' : 'toggler';\n        let removeButtonClassname = this.state.sidebarOpen ? 'removeButtonOpen' : 'removeButton';\n        if (this.state.savedRecommendations.length !== 0){\n            //the original movie and the saved recommendations are mapped through and displayed in tandem\n            return (\n                <>\n                    <ul className={sidebarClassname}>\n                        <div className={togglerClassname} tabIndex=\"1\" onClick={this.toggleWatchList} onKeyDown={this.toggleWatchList}><FontAwesomeIcon icon={faAngleDoubleRight} aria-label=\"Open the recommendations list\"/></div>\n                        <h2>Because you liked:</h2>\n                        {\n                            this.state.savedRecommendations.map((firebaseMovie, index) => {\n                                const primaryMovie = firebaseMovie[0];\n                                \n                                    return (\n                                        <div key={index}>\n                                            <h3>{primaryMovie.original_title}</h3>\n                                        </div>\n                                    )\n                                \n                            })\n                        }\n                        <h2>You should watch:</h2>\n                        {\n                            this.state.savedRecommendations.map((firebaseMovie) => {\n                                const arrayOfMovies = firebaseMovie[1];\n                                if (arrayOfMovies) {\n                                    return (\n                                        arrayOfMovies.map((movie) => {\n                                            return (\n                                                <div key={movie.id}>\n                                                    <li>\n                                                        <h3>{movie.title}</h3>\n                                                    </li>\n                                                </div>\n                                            )\n                                        })\n                                    )\n                                } else {\n                                    return null\n                                }\n                            })\n                        }\n                        <button className={`${removeButtonClassname} ${this.state.savedRecommendations.length === 0 ? \"\" : \"show\"}`} onClick={this.removeFromFirebase}>\n                            <FontAwesomeIcon icon={faTrash} aria-label=\"Delete all recommendations\"/>\n                        </button>\n                    </ul>\n                </>\n            )\n    } else {\n            return (\n                <ul className=\"watchList\">\n                    <p>Nothing to see here</p>\n                </ul>\n            )\n        }\n    }\n}\n\nexport default WatchList;","import { Component } from 'react';\n\n\nclass Footer extends Component {\n\n    render() {\n        return (\n            <footer className=\"wrapper\">\n                <p>Aleksandra Petryga, Brandon Michael Wong and Lucas Regazzi 👑 @ Juno College &copy;</p>\n            </footer>\n        )\n    }\n}\n\nexport default Footer;","import { Component } from 'react';\nimport { HashRouter as Router, Route, Link} from 'react-router-dom';\nimport Catalogue from './Components/Catalogue.js';\nimport MovieDetails from './Components/MovieDetails.js'\nimport SearchBar from './Components/SearchBar.js';\nimport WatchList from './Components/WatchList.js';\nimport Footer from './Components/Footer.js'\n\n //Some code was inspired by the codealong we did with Safi\nclass App extends Component {\n  render() {\n    return (\n\n      <Router>\n        <div className=\"App\">\n          <div className=\"app-all wrapper\">\n            <header>\n          <Link to=\"/\"><h1 tabIndex=\"1\">Film Buff</h1></Link>\n          <SearchBar search={this.handleSearchCall} />\n          <WatchList />\n          </header>\n          <Route exact path=\"/\" component={Catalogue} />\n          <Route path=\"/search/:searchQueryHere\" component={Catalogue} />\n          <Route path=\"/movie/:movieDetails\" component={MovieDetails} />\n          </div>\n            <Footer />\n        </div>\n      </Router>\n    )\n  }\n}\nexport default App;\n//basename={process.env.PUBLIC_URL}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}