//this component does the work of providing recommendations to the user based on the original movie they selected, as well as the language they decide they'd like the recommendations to appear in. once these recommendations are retrieved and printed, the user can store the recommendations along with the original movie selected in a database.
import Axios from 'axios';
import { Component } from 'react';
import firebase from '../firebase.js';
import NewMovies from './NewMovies.js';
import { library } from '@fortawesome/fontawesome-svg-core';
import { faHeart } from '@fortawesome/free-solid-svg-icons';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
library.add(faHeart);

class Suggested extends Component {
    constructor() {
        super();
        this.state = {
            userSelection: '',
            foreignMovie: []
        }
    }

    //this axios call accesses randomized recommendations based on the genre from the selected movie â€” through props. the 'val' parameter constitutes information captured from the selected option in a dropdown menu of different possible languages
    axiosCall = (val) => {
        let randomPage = (pageNumber) => { return (Math.floor(Math.random() * Math.floor(pageNumber))) };
        //this condition specifies, if the user has not
        if (val) {
            Axios({
                url: `https://api.themoviedb.org/3/discover/movie`,
                params: {
                    api_key: '47f7f0a78ce3e2f1427da95247b6bc0e',
                    language: val,
                    with_genres: this.props.genre,
                    page: randomPage(100) + 1 
                },
            //because the data comes back to us as a bulky 20 objects in an array, reducedData slices it down to a more manageable 6 movies
            }).then((res) => {
                let reducedData = res.data.results.slice(0, 6);
                this.setState({
                    foreignMovie: reducedData
                })
            }).catch(() => {
                alert('error');
            })
        //the axios call does not run unless the user selects a language
        } else {
            alert('Please select a language')
        }
    }

    //the recommendations generated by the axios call can be saved by the user once they press the button that contains this function onclick
    saveSelection = () => {
        //the 'save' is to firebase, which we refer to in this variable
        const dbRef = firebase.database().ref();
        //if the user has not generated an axios call with the list of recommendations, the user cannot save an outcome. the length of the array determines this, not the signifier of an empty array
        if (this.state.foreignMovie.length === 0) {
            alert('Nothing has been selected yet')
        }
        //this listener retrieves the information store in fire base
        else {
            dbRef.once('value', (data) => {
                const firebaseDataObj = data.val();
                //establishes an empty array
                let firebaseData = [];
                for (let prop in firebaseDataObj) {
                    const movie = firebaseDataObj[prop];
                    //and pushes what's otherwise an object into the array of state
                    firebaseData.push(movie);
                }
                // console.log(firebaseDataObj); - for future error handling
                dbRef.push([this.props.movie, this.state.foreignMovie])
            });
        }
    }

    //retrieves the user's selection of language and stores it in state
    handleInputChange = (e) => {
        this.setState({
            userSelection: e.target.value,
        });
    }

    //makes the axios call for generating recommendations
    handleSubmit = (e) => {
        e.preventDefault();
        this.axiosCall(this.state.userSelection);
    }

    render() {
        return (
            <div>
                <br />
                <form className="flex column dropDownForm">
                    <label htmlFor="languagesDropDown">Interested in something similar but in a different language?</label>
                    <div className="flex dropDownBox">
                        <select
                            name="languagesDropdown"
                            id="languagesDropdown"
                            onChange={this.handleInputChange}
                            value={this.state.userSelection}>
                            <option value="" disabled>Language</option>
                            <option value="cn">Chinese</option>
                            <option value="de">German</option>
                            <option value="it">Italian</option>
                            <option value="jp">Japanese</option>
                            <option value="ru">Russian</option>
                            <option value="es">Spanish</option>
                        </select>
                        <button
                            className="dropDownButton"
                            onClick={this.handleSubmit}>Show me
                        </button>
                    </div>
                </form>
                <button className="favourite" onClick={this.saveSelection}>
                    <FontAwesomeIcon icon={['fa', 'heart']} />
                </button>
                <NewMovies
                    foreignMoviesProp={this.state.foreignMovie} />
            </div>
        )
    }
}

export default Suggested;